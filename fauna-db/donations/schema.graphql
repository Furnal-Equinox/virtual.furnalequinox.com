type Donation {
  # The donor's fur name.
  furName: String! @unique

  # The donor's email address.
  emailAddress: String! @unique

  # The donor's Discord handle.
  discordHandle: String @unique

  # Normalized donation amount in terms of lowest denominator, e.g.,
  # $1.00 => 100 cents => stored as 100 here.
  amount: Int!
}

type Donor {
  # The donor's fur name.
  furName: String! @unique

  # The donor's email address.
  emailAddress: String! @unique

  # The donor's Discord handle.
  discordHandle: String @unique
}

type Totals {
  # Number of donors
  numberOfDonors: Int!  

  # Total amount donated
  amountDonated: Int!
}

type Query {
  # Get all donations
  allDonations: [Donation!]

  getTotals: Totals!

  # Get a donation record by a donor's fur name
  getDonationByFurName(furName: String!): Donation!

  # Get a donation record by a donor's Discord handle
  # Since the Discord handle is optional, this query may not return a result.
  getDonationByDiscordHandle(discordHandle: String!): Donation

  # Get a donation record by a donor's email address
  getDonationByEmailAddress(emailAddress: String!): Donation!

  # get all donations sorted by the donation amount
  allDonationsSortedByAmount: [Donation!]! @resolver(name: "allDonationsSortedByAmount", paginated: true)

  # Get all donors
  allDonors: [Donor!]

  # Get a donor by searching for their fur name.
  getDonorByFurName(furName: String!): Donor!

  # Get a donor by searching for their Discord handle.
  # Since the Discord handle is optional, this query may not return a result.
  getDonorByDiscordHandle(discordHandle: String!): Donor

  # Get a donor by searching for their email address.
  getDonorByEmailAddress(emailAddress: String!): Donor!
}